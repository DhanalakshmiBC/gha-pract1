name: Reaact app
on: 
    push:
        branches:
            - master
            - main
        paths-ignore:
            - .github/workflows/issues.yml
    pull_request:
        types:
            - opened
    workflow_dispatch:
        inputs:
            environment:
              description: "Environment to deploy to"
              required: true
              default: "staging"

jobs: 
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache dependency
              id: cache
              uses: actions/cache@v3
              with:
                path: node_modules
                key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
            - name: Install dependencies
              if: steps.cache.outputs.cache-hit != 'true'
              run: npm ci
            - name: Lint
              run: npm run lint 
              
    test:
        needs: lint
        continue-on-error: true
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v3
            - name: install node
              uses: actions/setup-node@v3
              with: 
                node-version: 18
            - name: Cache dependency
              id: cache
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
            - name: install dependency
              if: steps.cache.outputs.cache-hit != 'true'
              run: npm ci
            - name: test the code
              continue-on-error: true
              id: run-test
              run: npm run test
            - name: Upload test report
              if: failure() && steps.run-test.outputs == 'failure'
              uses: actions/upload-artifact@v4
              with: 
                 name: test-report
                 path: test.json
           
    build:
        needs: test
        runs-on: ubuntu-latest
        steps: 
            - name: checkout code
              uses: actions/checkout@v3
            - name: install node
              uses: actions/setup-node@v3
              with:
                node-version: 18
            - name: Cache dependency
              id: cache
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
            - name: Install dependency
              if: steps.cache.outputs.cache-hit != 'true'
              run: npm ci
            - name: build project
              run: npm run build
            - name: Deploy
              run: echo 'Deploying......'
            - name: Output event
              run: echo "${{ toJSON(github.event) }}"
            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                name: dist-files
                path: dist
                # path: |
                #    dist
                #    package.json

    deploy:
                    needs: build
                    uses: ./.github/workflows/reusable.yml
                    with:
                      artifact-name: dist-files
                     
                     
    print-deploy-result:
                        needs: deploy
                        runs-on: ubuntu-latest
                        steps:
                          - name: Print deploy output
                            run: echo "${{ needs.deploy.outputs.result }}"
              
    report:
        needs: [lint,test,build,deploy]
        if: failure()
        strategy:
            matrix:
                node-version: [12,14,16]
                operating-system: [ubuntu-latest, windows-latest]
                include:
                    - node-version: 18
                      operating-system: ubuntu-latest
                exclude: 
                    - node-version: 12
                      operating-system: windows-latest

        runs-on: ${{matrix.operating-system}}
        steps:
            - name: Output information
              run: |
                echo "Something went wrong"
                echo "${{ toJSON(github) }}"

    
    ECR_ECS_Deployment:
                    name: Build Docker Image And Push To ECR And Deploy To ECS
                    runs-on: ubuntu-latest  
                    steps:  
                        - name: Checkout
                          uses: actions/checkout@v2    
                          
                        - name: Setup AWS ECR Details
                          uses: aws-actions/configure-aws-credentials@v1
                          with:
                            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                            aws-region: ${{secrets.AWS_REGION}}
                
                        - name: Login to Amazon ECR
                          id: login-pf-aws-ecr
                          uses: aws-actions/amazon-ecr-login@v1
                          
                        - name: Build and push the tagged docker image to Amazon ECR
                          id : containerImage
                          env:
                            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
                            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
                            IMAGE_TAG: deepilove
                          run: |
                            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
                        - name: list docker images
                          run: docker images
                        - name: list path
                          run: echo $ECR_REPOSITORY
                        - name: Install AWS CLI v2
                          run:  |
                                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
                                unzip -q /tmp/awscliv2.zip -d /tmp
                                rm /tmp/awscliv2.zip
                                sudo /tmp/aws/install --update
                                rm -rf /tmp/aws/
                        - name: list aws images
                          run: aws ecr list-images --repository-name "ecrdemo"  --region us-east-1
                
                        - name: ECR Status Check
                          if: steps.containerImage.outcome == 'failure'
                          run: exit 1